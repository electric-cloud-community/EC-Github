pluginInfo:
  pluginName: EC-Github
  version: 3.3.0
  description: CloudBees CD integration for Github API
  author: Polina
  authorUrl: pshubina@cloudbees.com
  category: Source Control
  repositoryUrl: https://github.com/electric-cloud-community/EC-Github

configuration:
  checkConnection: true
  restConfigInfo:
    defaultEndpointValue: 'https://api.github.com'
    checkConnectionUri: '/user'
    headers:
      Accept: '*'
    endpointDescription: 'Endpoint to connect to. By default Github API endpoint.'
    authSchemes:
      basic:
        userNameLabel: Username to connect to Github
        passwordLabel: Password to connect to Github
      bearer:
        passwordLabel: Bearer token to connect to Github API.
  hasDebugLevel: true

properties:
  - propertyName: ec_webhook
    credentialProtected: true
    properties:
      - propertyName: default
        properties:
          - propertyName: displayName
            value: GitHub
          - propertyName: procedureName
            value: webhook
          - propertyName: script
            value: '$[/myProject/ec_webhook/script.groovy]'
          - propertyName: setupProcedure
            value: SetupWebhook

procedures:
  - name: SetupWebhook
    shell: ec-groovy
    hasConfig: attach
    hideFromStepPicker: true
    parameters:
      - name: repositoryNames
        type: textarea
      - name: ec_trigger
        condition: ${false}
      - name: ec_action
        condition: ${false}
      - name: config
        required: false
      - name: credential
        type: credential

  - name: webhook
    shell: ec-groovy
    hideFromStepPicker: true
#    this is a webhook backing procedure (gives form for the webhook)
    parameters:
      - name: repositories
        type: textarea
        documentation: List of repositories, separated by a newline.
        required: false
      - name: pushEvent
        type: checkbox
        label: Process Push?
        documentation: Processes push events
      - name: prEvent
        type: checkbox
        label: Process Pull Request?
      - name: prAction
        type: textarea
        dependsOn: prEvent
        condition: ${prEvent == "true"}
        documentation: The action that was performed. Can be one of opened, edited, closed, assigned, unassigned, review_requested, review_request_removed, ready_for_review, labeled, unlabeled, synchronize, locked, unlocked, or reopened. If the action is closed and the merged key is false, the pull request was closed with unmerged commits. If the action is closed and the merged key is true, the pull request was merged.
      - name: includeBranches
        type: textarea
        dependsOn: pushEvent
        condition: ${pushEvent == "true"}
      - name: excludeBranches
        type: textarea
        required: false

  - name: Create Repository
    description: Creates a GitHub Repository
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: owner
        label: Owner
        type: entry
        required: true
        documentation: Repository owner, may be either user or organization.
      - name: repo
        label: Repository Name
        required: true
        documentation: Repository name.
        type: entry
      - name: description
        label: Repository Description
        type: textarea
        documentation: Description for the repository.
      - name: public
        label: Public?
        type: checkbox
        documentation: Check to create a public repository.
        checkedValue: true
        uncheckedValue: false
        initiallyChecked: true
      - name: teams
        label: Teams
        type: textarea
        documentation: |
          Teams to add to the repository.
          E.g. "admins:ADMIN", "users:PUSH".
          Teams are newline-separated. Available permissions are ADMIN, PULL and PUSH.
          Teams are applicable to the organization only.
      - name: branchProtectionRules
        label: Branch Protection Rules
        type: textarea
        documentation: |
          Rules to protect branches, e.g. master: reviewers = 1
      - name: addLicense
        type: checkbox
        label: Add License?
        documentation: If checked, a license will be added to the repository.
        checkedValue: true
        uncheckedValue: false
      - name: licenseFile
        label: License File
        dependsOn: github_addLicense
        type: entry
        condition: ${github_addLicense} == "true"
        documentation: Path to the LICENSE file on the filesystem. If the file does not exist, the procedure will throw an error.

  - name: Delete Release
    description: Deletes a tag and an attached release from Github
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        documentation: Repository name, in form owner/repo.
        label: Repository Name
        type: entry
      - name: tagName
        label: Tag Name
        type: entry
        documentation: Tag name to delete. The release will be deleted as well.
        required: true

  - name: Download Release Asset
    description: Downloads the specified release asset from Github.
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name

      - name: tagName
        required: true
        documentation: Tag name for the release
        label: Tag Name
        type: entry

      - name: assetName
        required: true
        documentation: Asset name for thhe downloading.
        label: Asset Name
        type: entry

      - name: assetPath
        required: false
        documentation: Destination path for the downloaded asset.
        label: Asset Path
        type: entry

  - name: Upload Files
    description: |
      This procedure uploads the provided files into the provided repository
    shell: ec-groovy
    hasConfig: true
    parameters:
     - name: ownerName
       required: true
       label: Repository Owner
       type: entry
       documentation: The name of the user or organization which owns the repository
     - name: repoName
       required: true
       label: Repository Name
       type: entry
       documentation: The name of the GH repository.
     - name: sourceDirectory
       required: false
       type: entry
       label: Source Directory
       documentation: |
        The directory resembling the repository source.
        If not provided, the current directory will be used.
        The relative paths of the files will be used to provide the path in the repository.
     - name: mapping
       documentation: |
         A mapping in JSON form to provide the path to file in the repository, e.g.
         {'file': "my/file"} where file is the path to the file relative to the source directory.
       type: textarea
       label: Mapping
     - name: files
       label: Files
       documentation: |
         A list of files relative to the source directory, newline-separated
       type: textarea
     - name: branch
       label: Branch
       value: master
       type: entry
       documentation: |
        A branch name to commit files to.
        If not master, the branch will be created from the master branch.
     - name: createPr
       type: checkbox
       label: Create Pull Request?
       checkedValue: true
       uncheckedValue: false
       documentation: |
         If checked, a PR will be created for the updated files.

  - name: Get Files
    description: |
      This procedure fetches the content of the specified files and stores it in
      the filesystem or in the provided property
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: ownerName
        required: true
        label: Repository Owner
        type: entry
        documentation: The name of the user or organization which owns the repository
      - name: repoName
        required: true
        label: Repository Name
        type: entry
        documentation: The name of the GH repository.
      - name: files
        required: true
        label: Files
        documentation: |
          The newline-separated list of paths to the files
        type: textarea
      - name: destinationFolder
        required: false
        label: Folder to Save Files
        type: entry
        documentation: The folder to save retrieved files, absolute or relative path
      - name: ref
        label: Git Reference
        required: false
        value: master
        documentation: Reference (branch, commit or tag to download file from)

  - name: Set Commit Status
    description: Set status for a commit using its SHA
    hasConfig: true
    shell: ec-groovy
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name
      - name: sha
        required: true
        type: entry
        documentation: Commit SHA of the commit to set status to.
        label: Commit SHA
      - name: state
        type: select
        required: false
        label: State
        documentation: State for the commit.
        options:
          - name: error
            value: error
          - name: failure
            value: failure
          - name: pending
            value: pending
          - name: success
            value: success
      - name: targetUrl
        type: entry
        documentation: |
          The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
        label: Target URL
        required: false
      - name: mimic
        label: Mimic Runtime Status
        type: select
        required: false
        options:
          - name: Job
            value: job
          - name: Pipeline Runtime
            value: pipelineRuntime
          - name: stageRuntime
            value: stageRuntime
        documentation: If selected, the GH status will be posted according to the status of the current CD runtime.
      - name: description
        type: textarea
        required: false
        label: Description
        documentation: A short description of the status.

  - name: Get Commit
    description: This procedure retrieves a commit data for the specified SHA
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name
      - name: sha
        required: true
        type: entry
        documentation: Commit SHA of the commit to set status to.
        label: Commit SHA
      - name: resultPropertySheet
        value: /myJob/result
        label: Result Property Sheet
        documentation: Property sheet to save commit into to.

  - name: Create Release
    description: This procedure can create a new Github Release or update an existing one.
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name

      - name: updateAction
        type: radio
        required: true
        documentation: Choose update action - what to do if the release already exists.
        options:
          - name: Do Nothing
            value: noop
          - name: Recreate
            value: recreate
          - name: Fail
            value: fail
          - name: Update
            value: update

      - name: releaseName
        label: Release Name
        documentation: The name for the release.
        type: entry

      - name: tagName
        required: true
        documentation: Tag name for the release
        label: Tag Name
        type: entry

      - name: commitish
        label: Source Commit
        documentation: The commit to create a tag from
        type: entry

      - name: body
        label: Release Body
        documentation: Description for the release.
        type: textarea
      - name: assets
        label: Release Assets
        documentation: |
          Release assets in form {"name": "path/to/file"}
      - name: prerelease
        label: Prerelease?
        documentation: If checked, the release will be marked as a prerelease
        type: checkbox
        checkedValue: true
        uncheckedValue: false

      - name: deleteOldTag
        type: checkbox
        dependsOn: updateAction
        condition: ${updateAction} == 'recreate'
        label: Delete Old Tag?
        documentation: If checked, the old tag associated with the old release will be deleted.
        checkedValue: true
        uncheckedValue: false

  - name: Find Pull Requests
    description: This procedure will return all open PRs. If a branch is given, only PR with head at branch will be returned.
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name
      - name: branchName
        label: Branch Name
        required: false
        type: entry
        documentation: Name of the HEAD branch (one that will be merged).
    outputParameters:
      prNum : Numbers of the found pull request(s).

  - name: Add Issue Comment
    description: This procedure can create comments in issues and pull requests.
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name
      - name: issueNum
        label: Issue or PR Num
        required: true
        type: entry
        documentation: Id of the pull request or issue where comment will be created.
      - name: commentBody
        label: Comment
        type: textarea
        required: true
        documentation: Content of the comment. Markdown can be used here.
    outputParameters:
      commentId: Id of the created comment

  - name: Create Pull Request
    shell: ec-groovy
    description: This procedure will create a pull request for the specified repository.
    hasConfig: true
    parameters:
      - name: repository
        label: Repository Name
        documentation: Repository name in form owner/name.
        required: true
        type: entry
      - name: base
        label: Base
        documentation: The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
        required: true
        type: entry
        value: master
      - name: head
        label: Head
        documentation: |
          The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.
        type: entry
        required: true
      - name: title
        label: Title
        documentation: The title of the new pull request.
        type: textarea
        required: false
      - name: body
        type: textarea
        documentation: The contents of the pull request.
        required: false
        label: Body
#      - name: draft
#        type: checkbox
#        label: Draft?
#        documentation: Mark this PR as a draft.
#        checkedValue: true
#        uncheckedValue: false
#        required: false
#        value: false
      - name: resultProperty
        required: true
        type: entry
        label: Result Property Sheet
        documentation: Property sheet to save PR results
        value: /myJob/pr
    outputParameters:
      link: Link to the created pull request
      number: Number of the created pull request
      pr: JSON object that contains PR data

  - name: Run Script
    hasConfig: true
    shell: ec-groovy
    description: This procedure will run a pre-defined groovy script.
    parameters:
    - name: script
      type: textarea
      required: true
      label: Script
      documentation: Groovy script to run.
    outputParameters:
     result: The last value returned from the script.
