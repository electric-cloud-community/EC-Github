pluginInfo:
  pluginName: EC-Github
  version: 2.1.0
  description: CloudBees Flow integration for Github API
  author: Polina
  authorUrl: pshubina@cloudbees.com
  category: Source Control


configuration:

#  checkConnection: true
#  rest:
#    defaultEndpointValue: 'https://api.github.com'
#    checkConnectionUri: '/user'
#    endpointDescription: 'Endpoint to connect to. By default Github API endpoint.'
#    authSchemes:
#      basic:
#        userNameLabel: Username to connect to Github
#        passwordLabel: Password to connect to Github
#      bearer:
#        passwordLabel: Bearer token to connect to Github API.
#  hasDebugLevel: true

  parameters:
    - name: credential
      required: true
      label: Credentials to Connect
      type: credential


procedures:
  - name: Create Repository
    description: Creates a GitHub Repository
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: owner
        label: Owner
        type: entry
        required: true
        documentation: Repository owner, may be either user or organization.
      - name: repo
        label: Repository Name
        required: true
        documentation: Repository name.
        type: entry
      - name: description
        label: Repository Description
        type: textarea
        documentation: Description for the repository.
      - name: public
        label: Public?
        type: checkbox
        documentation: Check to create a public repository.
        checkedValue: true
        uncheckedValue: false
        initiallyChecked: true
      - name: teams
        label: Teams
        type: textarea
        documentation: |
          Teams to add to the repository.
          E.g. "admins:ADMIN", "users:PUSH".
          Teams are newline-separated. Available permissions are ADMIN, PULL and PUSH.
          Teams are applicable to the organization only.
      - name: branchProtectionRules
        label: Branch Protection Rules
        type: textarea
        documentation: |
          Rules to protect branches, e.g. master: reviewers = 1
      - name: addLicense
        type: checkbox
        label: Add License?
        documentation: If checked, a license will be added to the repository.
        checkedValue: true
        uncheckedValue: false
      - name: licenseFile
        label: License File
        dependsOn: github_addLicense
        type: entry
        condition: ${github_addLicense} == "true"
        documentation: Path to the LICENSE file on the filesystem. If the file does not exist, the procedure will throw an error.

  - name: Delete Release
    description: Deletes a tag and an attached release from Github
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        documentation: Repository name, in form owner/repo.
        label: Repository Name
        type: entry
      - name: tagName
        label: Tag Name
        type: entry
        documentation: Tag name to delete. The release will be deleted as well.
        required: true

  - name: Download Release Asset
    description: Downloads the specified release asset from Github.
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name

      - name: tagName
        required: true
        documentation: Tag name for the release
        label: Tag Name
        type: entry

      - name: assetName
        required: true
        documentation: Asset name for thhe downloading.
        label: Asset Name
        type: entry

      - name: assetPath
        required: false
        documentation: Destination path for the downloaded asset.
        label: Asset Path
        type: entry

  - name: Upload Files
    description: |
      This procedure uploads the provided files into the provided repository
    shell: ec-groovy
    hasConfig: true
    parameters:
     - name: ownerName
       required: true
       label: Repository Owner
       type: entry
       documentation: The name of the user or organization which owns the repository
     - name: repoName
       required: true
       label: Repository Name
       type: entry
       documentation: The name of the GH repository.
     - name: sourceDirectory
       required: false
       type: entry
       label: Source Directory
       documentation: |
        The directory resembling the repository source.
        If not provided, the current directory will be used.
        The relative paths of the files will be used to provide the path in the repository.
     - name: mapping
       documentation: |
         A mapping in JSON form to provide the path to file in the repository, e.g.
         {'file': "my/file"} where file is the path to the file relative to the source directory.
       type: textarea
       label: Mapping
     - name: files
       label: Files
       documentation: |
         A list of files relative to the source directory, newline-separated
       type: textarea
     - name: branch
       label: Branch
       value: master
       type: entry
       documentation: |
        A branch name to commit files to.
        If not master, the branch will be created from the master branch.
     - name: createPr
       type: checkbox
       label: Create Pull Request?
       checkedValue: true
       uncheckedValue: false
       documentation: |
         If checked, a PR will be created for the updated files.

  - name: Get Files
    description: |
      This procedure fetches the content of the specified files and stores it in
      the filesystem or in the provided property
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: ownerName
        required: true
        label: Repository Owner
        type: entry
        documentation: The name of the user or organization which owns the repository
      - name: repoName
        required: true
        label: Repository Name
        type: entry
        documentation: The name of the GH repository.
      - name: files
        required: true
        label: Files
        documentation: |
          The newline-separated list of paths to the files
        type: textarea
      - name: destinationFolder
        required: false
        value: files
        label: Folder to Save Files
        type: entry
        documentation: The folder to save retrieved files, absolute or relative path
      - name: ref
        label: Git Reference
        required: false
        value: master
        documentation: Reference (branch, commit or tag to download file from)


  - name: Create Release
    description: This procedure can create a new Github Release or update an existing one.
    shell: ec-groovy
    hasConfig: true
    parameters:
      - name: repoName
        required: true
        type: entry
        documentation: Repository name, in form owner/repo.
        label: Repository Name

      - name: updateAction
        type: radio
        required: true
        documentation: Choose update action - what to do if the release already exists.
        options:
          - name: Do Nothing
            value: noop
          - name: Recreate
            value: recreate
          - name: Fail
            value: fail
          - name: Update
            value: update

      - name: releaseName
        label: Release Name
        documentation: The name for the release.
        type: entry

      - name: tagName
        required: true
        documentation: Tag name for the release
        label: Tag Name
        type: entry

      - name: commitish
        label: Source Commit
        documentation: The commit to create a tag from
        type: entry

      - name: body
        label: Release Body
        documentation: Description for the release.
        type: textarea
      - name: assets
        label: Release Assets
        documentation: |
          Release assets in form {"name": "path/to/file"}
      - name: prerelease
        label: Prerelease?
        documentation: If checked, the release will be marked as a prerelease
        type: checkbox
        checkedValue: true
        uncheckedValue: false

      - name: deleteOldTag
        type: checkbox
        dependsOn: updateAction
        condition: ${updateAction} == 'recreate'
        label: Delete Old Tag?
        documentation: If checked, the old tag associated with the old release will be deleted.
        checkedValue: true
        uncheckedValue: false
